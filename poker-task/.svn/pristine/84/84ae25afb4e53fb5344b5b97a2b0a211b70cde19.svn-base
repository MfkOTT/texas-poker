package com.slt.poker.task;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.slt.poker.service.PlayerKPIService;
import com.slt.poker.service.HandCardService;
import com.slt.poker.service.KpiService;
import com.slt.poker.service.RankingService;

@Component
public class CalcKpiTask {
	private static final Logger log = LoggerFactory.getLogger(CalcKpiTask.class);
	@Autowired
	private RankingService rankingService;
	@Autowired
	private HandCardService handCardService;
	@Autowired
	private KpiService kpiService;
	@Autowired
	private PlayerKPIService playerKPIService;
	/**
	 * 计算指标
	 */
//	@Scheduled(cron = "${calcKpi}")
	@Scheduled(fixedRate = 20 * 1000)
	public void calcKpi() {
		//计算盈利排行榜
		long beginTime = System.currentTimeMillis();
		log.info("==calculate kpi executing==");
		log.info("==beginTime:{}",beginTime);
//		try {
//				this.rankingService.saveCalcWeek();
//				this.rankingService.saveCalcMonth();
//		} catch (Exception e) {
//			log.error("**calcProfitRanking error**");
//		}
		
		//计算起手牌盈利统计
		try {

			// this.handCardService.saveHandCardProfit();
			// this.handCardService.saveHandCardPostion();
			// this.rankingService.saveCalcWeek();
			// this.rankingService.saveCalcMonth();
			// this.playerKPIService.saveSevenDayProfit();
			// this.playerKPIService.savePlayerKPIMonth();
			// this.playerKPIService.saveMilitaryExploits();
			this.playerKPIService.savePlayerHavaShowdownWinRate();

		} catch (Exception e) {
			e.printStackTrace();
			log.error("**calcHandCardProfit error**");
		}
		//计算对局入池率及下注率
		try {
			this.kpiService.saveBetKpi();
			this.kpiService.saveTotalRaiseKpi();
			this.kpiService.saveRaiseKpi();
			this.kpiService.saveTotalColdCallKpi();
			this.kpiService.saveColdCallKpi();
			this.kpiService.saveTotalSneakInKpi();
			this.kpiService.saveSneakInKpi();
			this.kpiService.saveTotalBetThreeKpi();
			this.kpiService.saveBetThreeKpi();
			this.kpiService.saveTotalCallBetThreeKpi();
			this.kpiService.saveCallBetThreeKpi();
		} catch (Exception e) {
			e.printStackTrace();
			log.error("**calcPlayerKpi error**");
		}	
		
		long endTime = System.currentTimeMillis();
		log.info("==calculate kpi execut success==spend:{}(ms)", (endTime - beginTime));
	}
}
